package org.snoflo.repository;

import java.nio.file.Path;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.h2.jdbc.JdbcSQLSyntaxErrorException;

import com.zaxxer.hikari.HikariDataSource;

public interface FinderRepository {

    HikariDataSource getDataSource();

    default void createTable(Path selectedFilePath) throws SQLException {
        String fileName = selectedFilePath.getFileName().toString();
        fileName = fileName.replace(".csv", "");
        fileName = fileName.toLowerCase();

        StringBuilder tableSql = new StringBuilder();
        // tableSql.append(" CREATE TABLE IF NOT EXISTS ")
        tableSql.append(" CREATE TABLE ")
                .append(fileName)
                .append("(")
                .append(" id INTEGER GENERATED BY DEFAULT AS IDENTITY, ")
                .append(" concept VARCHAR(255) NOT NULL UNIQUE,")
                .append("description VARCHAR(255) NOT NULL UNIQUE,")
                .append("keyword1 VARCHAR(255),")
                .append("keyword2 VARCHAR(255),")
                .append(" PRIMARY KEY (id)")
                .append(")");

        try (Connection conn = getDataSource().getConnection()) {
            PreparedStatement stmt = conn.prepareStatement(tableSql.toString());
            stmt.execute();
        }
    }

    default void dropTable(Path selectedFilePath) {
        String fileName = selectedFilePath.getFileName().toString();
        fileName = fileName.replace(".csv", "");
        fileName = fileName.toLowerCase();

        StringBuilder sql = new StringBuilder();
        sql.append("DROP TABLE ")
                .append(fileName);

        try (Connection conn = getDataSource().getConnection()) {

            PreparedStatement stmt = conn.prepareStatement(sql.toString());
            stmt.execute();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

     default void truncateTable(Path selectedFilePath) {
        String fileName = selectedFilePath.getFileName().toString();
        fileName = fileName.replace(".csv", "");
        fileName = fileName.toLowerCase();

        StringBuilder sql = new StringBuilder();
        sql.append("TRUNCATE TABLE ")
                .append(fileName);

        try (Connection conn = getDataSource().getConnection()) {

            PreparedStatement stmt = conn.prepareStatement(sql.toString());
            stmt.execute();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    default List<String> getTableList() {
        List<String> list = new ArrayList<>();

        try (Connection conn = getDataSource().getConnection()) {
            DatabaseMetaData meta = conn.getMetaData();
            ResultSet tables = meta.getTables(null, "PUBLIC", "%", new String[] { "TABLE" });

            while (tables.next()) {
                String tableName = tables.getString("TABLE_NAME");
                list.add(tableName);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

}
